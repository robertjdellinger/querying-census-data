),
year = 2020,
survey = "acs5",
state = "CA",
county = county,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
}, .progress = TRUE),
rbind
)
# Vector of one or more counties
la_counties <- c("Los Angeles")
# Query ACS block group data for each county (parallel-capable)
la_bg_sf <- reduce(
future_map(la_counties, function(county) {
get_acs(
geography = "tract",
variables = c(
"pop_total" = "B03002_001",   # Total population
"hh_incomeM" = "B19013_001",   # Median household income
"hu_total"  = "B25001_001"    # Total housing units
),
year = 2020,
survey = "acs5",
state = "CA",
county = county,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
}, .progress = TRUE),
rbind
)
# Vector of one or more counties
la_counties <- c("Los Angeles")
# Query ACS block group data for each county (parallel-capable)
la_bg_sf <- reduce(
future_map(la_counties, function(county) {
get_acs(
geography = "block group",
variables = c(
"pop_total" = "B03002_001",   # Total population
"hh_incomeM" = "B19013_001",   # Median household income
"hu_total"  = "B25001_001"    # Total housing units
),
year = 2020,
survey = "acs5",
state = "CA",
county = county,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
}, .progress = TRUE),
rbind
)
# select the state of interest here
fips.ca <- "CA"
# Run with same structure (for consistency with national code)
state_bg_sf <- reduce(
future_map(fips.ca, function(x) {
get_acs(
geography = "block group",
variables = c(
"pop"         = "B03002_001",  # Total population
"pop_nhwhite" = "B03002_003",  # Non-Hispanic White
"pop_nhblack" = "B03002_004",  # Non-Hispanic Black
"popx_nhamind"= "B03002_005",  # Non-Hispanic American Indian
"popx_nhasian"= "B03002_006",  # Non-Hispanic Asian
"popx_nhhwnpi"= "B03002_007",  # Non-Hispanic Hawaiian/PI
"popx_nhother"= "B03002_008",  # Non-Hispanic Other
"popx_nhtwomr"= "B03002_009",  # Non-Hispanic Two+
"pop_hispltx" = "B03002_012",  # Hispanic/Latinx
"hu_total"    = "B25001_001",  # Total housing units
"hu_totocc"   = "B25003_001",  # Occupied housing units
"hu_totown"   = "B25003_002",  # Owner-occupied
"hu_totrnt"   = "B25003_003",  # Renter-occupied
"hh_total"    = "B19001_001",  # Total households
"hh_medinc"   = "B19013_001"   # Median household income
),
year = 2019,
survey = "acs5",
state = x,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
}, .progress = TRUE),
rbind
)
knitr::opts_chunk$set(echo = TRUE)
library(furrr)
library(purrr)
library(tidycensus)
library(tigris)
library(sf)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
#census_api_key("YOUR_CENSUS_API_KEY", install = TRUE)
num_cores <- availableCores() - 1
plan(multisession, workers = num_cores)
fips.ca <- "CA"
ca_ct_sf <- reduce(
future_map(fips.ca, function(x) {
get_acs(
geography = "tract",
variables = c(
"pop"         = "B03002_001",
"pop_nhwhite" = "B03002_003",
"pop_nhblack" = "B03002_004",
"popx_nhamind"= "B03002_005",
"popx_nhasian"= "B03002_006",
"popx_nhhwnpi"= "B03002_007",
"popx_nhother"= "B03002_008",
"popx_nhtwomr"= "B03002_009",
"pop_hispltx" = "B03002_012",
"hu_total"    = "B25001_001",
"hu_totocc"   = "B25003_001",
"hu_totown"   = "B25003_002",
"hu_totrnt"   = "B25003_003",
"hh_total"    = "B19001_001",
"hh_medinc"   = "B19013_001"
),
year = 2019,
survey = "acs5",
state = x,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
}, .progress = TRUE),
rbind
)
get_acs(
geography = "tract",
variables = c(
"pop"         = "B03002_001",
"pop_nhwhite" = "B03002_003",
"pop_nhblack" = "B03002_004",
"popx_nhamind"= "B03002_005",
"popx_nhasian"= "B03002_006",
"popx_nhhwnpi"= "B03002_007",
"popx_nhother"= "B03002_008",
"popx_nhtwomr"= "B03002_009",
"pop_hispltx" = "B03002_012",
"hu_total"    = "B25001_001",
"hu_totocc"   = "B25003_001",
"hu_totown"   = "B25003_002",
"hu_totrnt"   = "B25003_003",
"hh_total"    = "B19001_001",
"hh_medinc"   = "B19013_001"
),
year = 2019,
survey = "acs5",
state = x,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
get_acs(
geography = "tract",
variables = c(
"pop"         = "B03002_001",
"pop_nhwhite" = "B03002_003",
"pop_nhblack" = "B03002_004",
"popx_nhamind"= "B03002_005",
"popx_nhasian"= "B03002_006",
"popx_nhhwnpi"= "B03002_007",
"popx_nhother"= "B03002_008",
"popx_nhtwomr"= "B03002_009",
"pop_hispltx" = "B03002_012",
"hu_total"    = "B25001_001",
"hu_totocc"   = "B25003_001",
"hu_totown"   = "B25003_002",
"hu_totrnt"   = "B25003_003",
"hh_total"    = "B19001_001",
"hh_medinc"   = "B19013_001"
),
year = 2019,
survey = "acs5",
state = CA,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
get_acs(
geography = "tract",
variables = c(
"pop"         = "B03002_001",
"pop_nhwhite" = "B03002_003",
"pop_nhblack" = "B03002_004",
"popx_nhamind"= "B03002_005",
"popx_nhasian"= "B03002_006",
"popx_nhhwnpi"= "B03002_007",
"popx_nhother"= "B03002_008",
"popx_nhtwomr"= "B03002_009",
"pop_hispltx" = "B03002_012",
"hu_total"    = "B25001_001",
"hu_totocc"   = "B25003_001",
"hu_totown"   = "B25003_002",
"hu_totrnt"   = "B25003_003",
"hh_total"    = "B19001_001",
"hh_medinc"   = "B19013_001"
),
year = 2019,
survey = "acs5",
state = "CA",
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
knitr::opts_chunk$set(echo = TRUE)
library(furrr)
library(purrr)
library(tidycensus)
library(tigris)
library(sf)
library(ggplot2)
fips.ca <- "CA"
ca_ct_sf <- reduce(
future_map(fips.ca, function(x) {
get_acs(
geography = "tract",
variables = c(
"pop"         = "B03002_001",
"pop_nhwhite" = "B03002_003",
"pop_nhblack" = "B03002_004",
"popx_nhamind"= "B03002_005",
"popx_nhasian"= "B03002_006",
"popx_nhhwnpi"= "B03002_007",
"popx_nhother"= "B03002_008",
"popx_nhtwomr"= "B03002_009",
"pop_hispltx" = "B03002_012",
"hu_total"    = "B25001_001",
"hu_totocc"   = "B25003_001",
"hu_totown"   = "B25003_002",
"hu_totrnt"   = "B25003_003",
"hh_total"    = "B19001_001",
"hh_medinc"   = "B19013_001"
),
year = 2019,
survey = "acs5",
state = x,
geometry = TRUE,
output = "wide",
keep_geo_vars = TRUE
)
}, .progress = TRUE),
rbind
)
hennepin_race <- get_decennial(
geography = "tract",
state = "MN",
county = "Hennepin",
variables = c(
Hispanic = "P2_002N",
White = "P2_005N",
Black = "P2_006N",
Native = "P2_007N",
Asian = "P2_008N"
),
summary_var = "P2_001N",
year = 2020,
geometry = TRUE
) %>%
mutate(percent = 100 * (value / summary_value))
knitr::opts_chunk$set(echo = TRUE)
tract_race <- get_decennial(
geography = "tract",
state = "MN",
county = "Hennepin",
variables = c(
Hispanic = "P2_002N",
White = "P2_005N",
Black = "P2_006N",
Native = "P2_007N",
Asian = "P2_008N"
),
summary_var = "P2_001N",
year = 2020,
geometry = TRUE
) %>%
mutate(percent = 100 * (value / summary_value))
# Set the state abbreviation
state_abbr <- "CA"  # Change this to your desired state abbreviation
# Retrieve list of counties for the selected state
state_counties <- tidycensus::fips_codes %>%
filter(state == state_abbr) %>%
distinct(county) %>%
arrange(county) %>%
pull(county)
# Print the list of counties
print(state_counties)
# Download tract-level race data for each county and combine into one dataset
tract_race_all <- map_dfr(state_counties, function(county_name) {
message(glue::glue("Downloading: {county_name}"))
tryCatch({
get_decennial(
geography = "tract",
state = state_abbr,
county = county_name,
variables = c(
Hispanic = "P2_002N",
White = "P2_005N",
Black = "P2_006N",
Native = "P2_007N",
Asian = "P2_008N"
),
summary_var = "P2_001N",
year = 2020,
geometry = TRUE,
output = "tidy"
) %>%
mutate(
county = county_name,
percent = 100 * (value / summary_value)
)
}, error = function(e) {
message(glue::glue("Failed for: {county_name} — {e$message}"))
return(NULL)
})
})
# Quick view
glimpse(tract_race_all)
# Download tract-level race data for each county and combine into one dataset
tract_race_all <- map_dfr(state_counties, function(county_name) {
message(glue::glue("Downloading: {county_name}"))
tryCatch({
get_decennial(
geography = "tract",
state = state_abbr,
county = county_name,
variables = c(
Hispanic = "P2_002N",
White = "P2_005N",
Black = "P2_006N",
Native = "P2_007N",
Asian = "P2_008N"
),
summary_var = "P2_001N",
year = 2020,
geometry = FALSE,
output = "tidy"
) %>%
mutate(
county = county_name,
percent = 100 * (value / summary_value)
)
}, error = function(e) {
message(glue::glue("Failed for: {county_name} — {e$message}"))
return(NULL)
})
})
# Quick view
glimpse(tract_race_all)
knitr::opts_chunk$set(echo = TRUE)
library(furrr)
library(purrr)
library(tidycensus)
library(tigris)
library(sf)
library(ggplot2)
library(tmap)
settigris_options(class = "sf")
tigris_options(class = "sf")
?tigris
tigris::tigris_options(class = "sf")
knitr::opts_chunk$set(echo = TRUE)
library(furrr)
library(purrr)
library(tidycensus)
library(tigris)
library(sf)
library(ggplot2)
library(tmap)
# Optional: Set your Census API key
# census_api_key("YOUR_API_KEY", install = TRUE)
# Download tract-level race data (without geometry)
la_tract_race <- get_decennial(
geography = "tract",
state = "CA",
county = "Los Angeles",
variables = c(
Hispanic = "P2_002N",
White = "P2_005N",
Black = "P2_006N",
Native = "P2_007N",
Asian = "P2_008N"
),
summary_var = "P2_001N",  # Total population
year = 2020,
geometry = FALSE,
output = "tidy"
) %>%
mutate(percent = 100 * (value / summary_value))
# Download tract geometries for Los Angeles County
la_tract_geom <- tracts(state = "CA", county = "Los Angeles", year = 2020, class = "sf")
la_tract_race
tract_race_all
tract_race_county <- tract_race_all %>%
group_by(county, variable) %>%
summarise(
percent_hispanic = mean(percent[variable == "Hispanic"], na.rm = TRUE),
percent_white = mean(percent[variable == "White"], na.rm = TRUE),
percent_black = mean(percent[variable == "Black"], na.rm = TRUE),
percent_native = mean(percent[variable == "Native"], na.rm = TRUE),
percent_asian = mean(percent[variable == "Asian"], na.rm = TRUE),
) %>%
ungroup()
tract_race_county
tract_race_all %>%
group_by(county, variable) %>%
summarise(
percent = mean(percent, na.rm = TRUE))
load_variables(2016, "dec", cache = TRUE)
load_variables(2016, "dhc", cache = TRUE)
load_variables(2010, "dhc", cache = TRUE)
# Load 2010 Decennial Census variables (Summary File 1)
vars_2010 <- load_variables(2010, "sf1", cache = TRUE)
# Load 2020 Decennial Census variables (DHC = Demographic and Housing Characteristics)
vars_2020 <- load_variables(2020, "dhc", cache = TRUE)
# Load 2000 Decennial Census variables (Summary File 1)
vars_2000 <- load_variables(2000, "sf1", cache = TRUE)
vars_2000
# Load 2010 Decennial Census variables (Summary File 1)
vars_2010 <- load_variables(2010, "sf1", cache = TRUE)
# Load 2020 Decennial Census variables (DHC = Demographic and Housing Characteristics)
vars_2020 <- load_variables(2020, "sf1", cache = TRUE)
# Load 2020 Decennial Census variables (DHC = Demographic and Housing Characteristics)
vars_2020 <- load_variables(2020, "dhc", cache = TRUE)
# Load 2010 Decennial Census variables (Summary File 1)
vars_2010 <- load_variables(2010, "sf1", cache = TRUE)
# Load 2020 Decennial Census variables (DHC = Demographic and Housing Characteristics)
vars_2020 <- load_variables(2020, "dhc", cache = TRUE)
# Load 2000 Decennial Census variables (Summary File 1)
vars_2000 <- load_variables(2000, "sf1", cache = TRUE)
# View race-related tables (e.g., starts with P2 for 2020)
vars_2020 %>% filter(grepl("^P2", name))
# View total population and housing-related variables in 2010
vars_2010 %>% filter(label %>% str_detect("Total population"))
# View common variable codes from 2000
vars_2000 %>% filter(grepl("Race", label))
# ---------------------------------------
# Load Decennial Census Variables by Year
# ---------------------------------------
# 2000 Decennial Census: Summary File 1 (SF1)
vars_2000 <- load_variables(2000, dataset = "sf1", cache = TRUE)
# 2010 Decennial Census: Summary File 1 (SF1)
vars_2010 <- load_variables(2010, dataset = "sf1", cache = TRUE)
# 2020 Decennial Census: Demographic and Housing Characteristics (DHC)
# DHC is the replacement for SF1 in 2020
vars_2020 <- load_variables(2020, dataset = "dhc", cache = TRUE)
# ---------------------------------------
# Explore Race-Related Variables
# ---------------------------------------
# 2020: View race-related tables (starts with "P2", e.g., P2_001N)
vars_2020 %>%
filter(str_starts(name, "P2"))
# 2010: View variables mentioning "Total population"
vars_2010 %>%
filter(str_detect(label, "Total population"))
# 2000: View variables related to "Race"
vars_2000 %>%
filter(str_detect(label, "Race"))
# ---------------------------------------
# Load Decennial Census Variables by Year
# ---------------------------------------
# 2000 Decennial Census: Summary File 1 (SF1)
vars_2000 <- load_variables(2000, dataset = "sf1", cache = TRUE)
# 2010 Decennial Census: Summary File 1 (SF1)
vars_2010 <- load_variables(2010, dataset = "sf1", cache = TRUE)
# 2020 Decennial Census: Demographic and Housing Characteristics (DHC)
# DHC is the replacement for SF1 in 2020
vars_2020 <- load_variables(2020, dataset = "dhc", cache = TRUE)
# ---------------------------------------
# Explore Race-Related Variables
# ---------------------------------------
# 2020: View race-related tables (starts with "P2", e.g., P2_001N)
vars_2020 %>%
filter(str_starts(name, "P2"))
# 2010: View variables mentioning "Total population"
vars_2010 %>%
filter(str_detect(label, "Total population"))
# 2000: View variables related to "Race"
vars_2000 %>%
filter(str_detect(label, "Race"))
# List available summary files for 2020, 2010, or 2000
summary_files(2020)
summary_files(2010)
summary_files(2000)
# Load available population groups for 2020 "ddhca"
get_pop_groups(2020, "ddhca")
# Load available population groups for 2020 "ddhca"
get_pop_groups(2010, "sf2")
# Load available population groups for 2020 "ddhca"
get_pop_groups(2010, "sf1")
get_pop_groups(2000, "sf2")
# List available summary files for 2020, 2010, or 2000
summary_files(2020)
summary_files(2010)
summary_files(2000)
# Load available population groups
get_pop_groups(2020, "ddhca")
get_pop_groups(2010, "sf2")
get_pop_groups(2000, "sf2")
get_pop_groups(2020, "ddhca")
get_pop_groups(2020, "ddhca")
get_pop_groups(2000, "sf2")
get_pop_groups(2010, "sf2")
